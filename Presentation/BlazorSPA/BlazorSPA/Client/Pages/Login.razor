@inject NavigationManager NavigationManager
@inject AuthService AuthService
@page "/Login"
@using BlazorSPA.Client.Services
@using BlazorSPA.Client.Data
@using Microsoft.AspNetCore.WebUtilities

@if (_invalidLogin)
{
    <div class="alert alert-danger">
        @Message
    </div>
}
<div class="text-center">
    <EditForm class="form-signin" Model="@_loginDTO" OnValidSubmit="OnValidSubmit" id="form">
        <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
        <label for="inputUsername" class="sr-only">Email address</label>
        <InputText type="username" id="inputUsername" class="form-control" placeholder="Username Or Email" required autofocus @bind-Value="_loginDTO.UsernameOrEmail" />
        <label for="inputPassword" class="sr-only">Password</label>
        <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" required @bind-Value="_loginDTO.Password" />
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
    </EditForm>
</div>

<SfSpinner @ref="SpinnerObj" Target="#form" />

@code {    
    private readonly LoginDTO _loginDTO = new LoginDTO
    {
        UsernameOrEmail = "Admin",
        Password = "Zxasqw12"
    };

    private bool _invalidLogin;
    private string Message { get; set; }
    private string returnUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var _returnUrl))
        {
            returnUrl = _returnUrl;
        }
    }

    private async void OnValidSubmit()
    {
        _invalidLogin = false;

        SpinnerObj.ShowSpinner(target);
        var (success, message) = await AuthService.Login(_loginDTO); 
        if (success)
        {
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            Message = message;
            _invalidLogin = true;
            StateHasChanged();
        }
        SpinnerObj.HideSpinner(target);
    }
    
    SfSpinner SpinnerObj;
    string target { get; set; } = "#form";
}

<style>
    .text-center {
      display: -ms-flexbox;
      display: flex;
      -ms-flex-align: center;
      align-items: center;
      padding-top: 40px;
      padding-bottom: 40px;
    }
    .form-signin {
      width: 100%;
      max-width: 330px;
      padding: 15px;
      margin: auto;
    }
    .form-signin .form-control {
      position: relative;
      box-sizing: border-box;
      height: auto;
      padding: 10px;
      font-size: 16px;
    }
    .form-signin .form-control:focus {
      z-index: 2;
    }
    .form-signin input[type="email"] {
      margin-bottom: -1px;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }
    .form-signin input[type="password"] {
      margin-bottom: 10px;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
</style>